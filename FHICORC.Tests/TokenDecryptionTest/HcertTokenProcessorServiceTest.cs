using System.Threading.Tasks;
using Moq;
using NUnit.Framework;
using FHICORC.Core.Services.DecoderServices;
using FHICORC.Core.Services.Enum;
using FHICORC.Core.Services.Interface;
using FHICORC.Core.Services.Model.CoseModel;
using FHICORC.Tests.TestMocks;
using FHICORC.Core.Services.BusinessRules;
using FHICORC.Core.Services;
using FHICORC.Core.Services.Model.Converter;
using FHICORC.Configuration;
using FHICORC.Core.WebServices;
using FHICORC.Services.Interfaces;

namespace FHICORC.Tests.TokenDecryptionTest
{
    public class HcertTokenProcessorServiceTest
    {
        private HcertTokenProcessorService verifier;
        private Mock<ICertificationService> MockCertificationService { get; set; }
        private readonly IRevocationBatchService _revocationBatchDataManager;

        public HcertTokenProcessorServiceTest()
        {
            IoCContainer.RegisterInterface<IRestClient, MockRestClient>();
            IoCContainer.RegisterInterface<IStatusBarService, MockStatusBarService>();
            MockCertificationService = new Mock<ICertificationService>();
            MockCertificationService.Setup(x => x.VerifyCoseSign1Object(It.IsAny<CoseSign1Object>()));
            verifier = new HcertTokenProcessorService(
                MockCertificationService.Object,
                new MockDateTimeService(),
                new RuleSelectorService(
                        new MockDateTimeService(),
                        new MockBusinessRulesService(),
                        IoCContainer.Resolve<IDigitalGreenValueSetTranslatorFactory>()
                    ),
                new RuleVerifierService(new MockPreferencesService()),
                new MockPreferencesService(),
                IoCContainer.Resolve<IDigitalGreenValueSetTranslatorFactory>(),
                IoCContainer.Resolve<ICertificateRevocationService>(),
                new FetchRevocationBatchesFromBackednService(_revocationBatchDataManager));
        }

        [Test]
        public async Task TestDecode_CanDecode_EC256()
        {
            //This test does not validate the signature, it just test the decoding part
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            //because this token is expired
            Assert.AreNotEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        [Test]
        public async Task TestDecode_CanDecode_RSA2048()
        {
            //This test does not validate the signature, it just test the decoding part
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            //because this token is expired
            Assert.AreNotEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        
        [Test]
        public async Task TestDecode_CanDecode_RSA3072()
        {
            //This test does not validate the signature, it just test the decoding part
            string prefixCompressedCose =

            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            //because this token is expired
            Assert.AreNotEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        [Test]
        public async Task TestDecode_Faulty_COSE()
        {
            string prefixCompressedCose =
                "HC1:NCFC:MQ.NAP2H432EEY.G61FXR4.N2IMJ1*GK7US4F47VYVJ+7TF:8YLE8S4V-80GF4+5$XSW27N*J6D2S9IK*D/G9RP2E$SIIO6MHANJBV4HXK7FAS+86T5.%VIWB+KM6VM8DFG:NDN7VEQXXNBIU%JK2SH.-A%5E*LFK$QPR5:1O$56ESL+8W:WCM33RET+.L0UC TMFCB77IO0IL4HS6N:F79-1.ZT.QGM5AUC1+I3RMRBPBSFFWWA+S9S%5IZS/731QABSR5NKF2NO62Y+6 $HWZEN/RP 4 EB29UV0Z0IRKQ6TB-W28VAG2JCMHCCA9ALK4RHZHDCO-%1GF9M0LC5GU3P:40510H*9S:M%0K3QLIF57+I0*UZMAV 2TJ761OY RF10IMKE06Z$Q3V960IQXVM+9*UR9WH$DC18BH0GLBJC$4Z-FVX1SCVD-Q -3MTGC8AP1QO:6GXECZBV*1%78BMKEX2XNI7%6QGO2X8DGB8DETFM0JQA/2B+5YMBX$S2/52X0E-O/8RR*8PW7T:TYYRLWFZ62KTVDJTLTQ3BR$4E65NL-5+UP%8M14AS0C88NM%AQZFF+FCGWM3U42963UC27$Q8Y7S3VH19P$BO%*1R4K5.UT1";
            
            
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        [Test]
        public async Task TestDecode_Faulty_CBOR()
        {
            string prefixCompressedCose =

                
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        //[Test]
        public async Task TestDecode_KidHeaderInUnProtectedHeader()
        {
            string prefixCompressedCose =
                "HC1:NCFOXNRTS3DH3ZSUZK+.V0ETD%6TNLAI6LR5OGINCJMKB:X9RFCR/GKQCAQCCV4*XUA2PSGH.+HIMIBRU SITK292W7*RBT1ON1XVHWVHE 9HOP+MMBT16Y5TU1AT1SU96IAXPMMCGCNNG.8 .GYE9/MVEK0WLI+J53J9OUUMK9WLIK*L5R1ZP3YXL.T1 R1VW5G H1R5GQ3GYBKUBFX9KS5W0SRZJ3T9NYJQP59$H5NI5K1*TB3:U-1VVS1UU15%HVLI7VHAZJ7UGBL04U2YO9XO9*E6FTIPPAAMI PQVW5/O16%HAT1Z%P WUQRENS431TN$IK.G47HB%0WT072HFHN/SNP.0FVV/SN7Y431TCRVH/M$%2DU2O3J$NNP5SLAFG.CILFFDA6LFCD9KWNHPA%8L+5I9JAX.B-QFDIAS.C4-9NKE$JDVPLW1KD0K8KES/F-1JF.K+W002CT+C-Z1+168+F HTH/L5IQ1PML/3I2T5N6P U2R4$V7WJBFCRK8SH-M508%I4ANV%72M8PV-7 %4L BD$BL-DDIV$UP4D8GZS9RCS1U81A6Y0-XP-MG";
                
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            //because this token is expired
            Assert.AreNotEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        
        [Test]
        public async Task TestDecode_Unknown_Prefix()
        {
            string prefixCompressedCose =

                
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        
        [Test]
        public async Task TestDecode_FaultyBase45()
        {
            string prefixCompressedCose =

                
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        [Test]
        public async Task TestDecode_FaultyCompressor()
        {
            string prefixCompressedCose =
                "HC1:C/A-H96N11UV/4UC-NIMUZT3V6IS TN0ULQCZO8ZXITMV85GO8EG JL2L51S*D56XJWAV/ NO 5OQU *NG1S/.F+5GE:RU5O1EU$%7T.F%BFVV70GAYUH 583JFJOT*HUTT03M0G F*C4YTLL$24KQ8$AJKLBVQZ 1-7TE1GTU44IVF%RI5G+P2HTQI4F4TA63WHKLYF00O3DMDCM7-P24X0GFEPGUCT8G5HKEE3J9%G9SCOYGU8GUN-S$KK6OFP80H56%889T1T-G%BRM7DQ68P00 HE7O7.W3YKIK10XEPL1PEQDF-BWBB%-9W4B7W91*J$IA7Z6ND9XQ4M09NT1PC43/RWG5C.2TSB:66UG3WX8.0I RPGWE2Z9+*GH08%0R$-2S838 A2UTK45IB9+B7 9SFOKXDI3Y9+NF:$4YV6*PPEYR0-45-P5OR9.NKVK XTFWVV5E IMLSKRG6TZUX/U%D78HVTZJX11J:AVKDTVULAW0PSP9W%*I6MDRIR+44K5GT*G0CHMDHS7B5GBIHAH%3X*A0:4ZJGIHH1 GIOR+SIX5VD0PZAUH:3 EK P8.T6LM4RFL2ANMWM9CU$UE8+IC54OS01+HYS1VFE:237Q2Z:NO:MU2";
                
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(result.ValidationResult, TokenValidateResult.Invalid);
        } 
        [Test]
        public async Task TestDecode_NoopCompressor()
        {
            string prefixCompressedCose =
                "HC1:RRQT 9GO0+$F%47N23.G2O609CKIA03XK4F35KC:CE2F3EFG2LU/IC6TAY50.FKP1LLWEYWEYPCZ$E7ZKPEDMHG7ECMUDQF60R6BB87M8BL6-A6HPCTB8IECDJCD7AW.CXJD7%E7WE KEVKEZ$EI3DA8D0EC*KE: CZ CGVC*JC1A6NA73W5KF6TF6$PC1ECFNGGPCEVCD8FI-AIPCZEDIEC EDM-DKPCG/DZKE/34QEDA/DOCCQF6$PCEEC5JD%96IA7B46646WX6JECFWEB1A-:8$966469L6OF6WX6F$DP9EJY8L/5M/5546.96VF6YPC4$C+70AVCPQEX47B46IL6646I*6UPCZ$ETB8RPC24EQ DPF6BW5E%6Z*83W5746JPCIEC6JD846Y968464W5Z57HWE/TEEOL2ECY$D9Q31ECOPC..DBWE-3EB441$CKWEDZCQ-A1$C..D734FM6K/EN9E%961A69L6QW6B46GPC8%E% D3IA4W5646946846.96SPC3$C.UDRYA 96NF6L/5SW6Z57LQE+CEJPC+EDQDD+Q6TW6FA7C46IPC34E/IC3UA*VDFWECM8KF6 590G6A*8746C562VCCWENF6OF63W56L6*96ZPC24EOD0P/EH.EY$5Y$5XPCZ CJAG8VCOPCPVC..49A61TAOF6LA7WW68463:6QF6A46UF6+Q6RF6//6SF6H%6NF6SF6646.Q627B5JQ0H3/.HJ2S%3U7SKVGH835.R7JL24/N$5TJZ2V32NCUPSOAWNNJSY$23RS+5TT4M862*O6IPDVZ8L1P0FQR6KHFC9Z7VDF";
            var result =  await verifier.DecodePassportTokenToModel(prefixCompressedCose);
            Assert.AreEqual(result.ValidationResult, TokenValidateResult.Invalid);
        }

    }
}